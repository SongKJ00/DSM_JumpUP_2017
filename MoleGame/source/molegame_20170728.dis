
molegame_20170728.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	6e c0       	rjmp	.+220    	; 0xe2 <__bad_interrupt>
   6:	00 00       	nop
   8:	6c c0       	rjmp	.+216    	; 0xe2 <__bad_interrupt>
   a:	00 00       	nop
   c:	6a c0       	rjmp	.+212    	; 0xe2 <__bad_interrupt>
   e:	00 00       	nop
  10:	68 c0       	rjmp	.+208    	; 0xe2 <__bad_interrupt>
  12:	00 00       	nop
  14:	66 c0       	rjmp	.+204    	; 0xe2 <__bad_interrupt>
  16:	00 00       	nop
  18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
  22:	00 00       	nop
  24:	5e c0       	rjmp	.+188    	; 0xe2 <__bad_interrupt>
  26:	00 00       	nop
  28:	5c c0       	rjmp	.+184    	; 0xe2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
  32:	00 00       	nop
  34:	56 c0       	rjmp	.+172    	; 0xe2 <__bad_interrupt>
  36:	00 00       	nop
  38:	54 c0       	rjmp	.+168    	; 0xe2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	50 c0       	rjmp	.+160    	; 0xe2 <__bad_interrupt>
  42:	00 00       	nop
  44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>
  46:	00 00       	nop
  48:	4c c0       	rjmp	.+152    	; 0xe2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	48 c0       	rjmp	.+144    	; 0xe2 <__bad_interrupt>
  52:	00 00       	nop
  54:	46 c0       	rjmp	.+140    	; 0xe2 <__bad_interrupt>
  56:	00 00       	nop
  58:	44 c0       	rjmp	.+136    	; 0xe2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	43 c0       	rjmp	.+134    	; 0xe4 <__vector_23>
  5e:	00 00       	nop
  60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
  62:	00 00       	nop
  64:	3e c0       	rjmp	.+124    	; 0xe2 <__bad_interrupt>
  66:	00 00       	nop
  68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3a c0       	rjmp	.+116    	; 0xe2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	38 c0       	rjmp	.+112    	; 0xe2 <__bad_interrupt>
  72:	00 00       	nop
  74:	36 c0       	rjmp	.+108    	; 0xe2 <__bad_interrupt>
  76:	00 00       	nop
  78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	32 c0       	rjmp	.+100    	; 0xe2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	30 c0       	rjmp	.+96     	; 0xe2 <__bad_interrupt>
  82:	00 00       	nop
  84:	2e c0       	rjmp	.+92     	; 0xe2 <__bad_interrupt>
  86:	00 00       	nop
  88:	2c c0       	rjmp	.+88     	; 0xe2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2a c0       	rjmp	.+84     	; 0xe2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	28 c0       	rjmp	.+80     	; 0xe2 <__bad_interrupt>
  92:	00 00       	nop
  94:	26 c0       	rjmp	.+76     	; 0xe2 <__bad_interrupt>
  96:	00 00       	nop
  98:	24 c0       	rjmp	.+72     	; 0xe2 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	22 c0       	rjmp	.+68     	; 0xe2 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	20 c0       	rjmp	.+64     	; 0xe2 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	1e c0       	rjmp	.+60     	; 0xe2 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	1c c0       	rjmp	.+56     	; 0xe2 <__bad_interrupt>
	...

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a4 e0       	ldi	r26, 0x04	; 4
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a6 30       	cpi	r26, 0x06	; 6
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>

000000c8 <__do_copy_data>:
  c8:	11 e0       	ldi	r17, 0x01	; 1
  ca:	a0 e0       	ldi	r26, 0x00	; 0
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	e0 e5       	ldi	r30, 0x50	; 80
  d0:	f4 e0       	ldi	r31, 0x04	; 4
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
  d4:	05 90       	lpm	r0, Z+
  d6:	0d 92       	st	X+, r0
  d8:	a4 30       	cpi	r26, 0x04	; 4
  da:	b1 07       	cpc	r27, r17
  dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>
  de:	a0 d0       	rcall	.+320    	; 0x220 <main>
  e0:	b5 c1       	rjmp	.+874    	; 0x44c <_exit>

000000e2 <__bad_interrupt>:
  e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <__vector_23>:

volatile unsigned int time = 0;

//Timer0 Overflow ISR
ISR(TIMER0_OVF_vect)
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
    time++;
  f2:	80 91 04 01 	lds	r24, 0x0104
  f6:	90 91 05 01 	lds	r25, 0x0105
  fa:	01 96       	adiw	r24, 0x01	; 1
  fc:	90 93 05 01 	sts	0x0105, r25
 100:	80 93 04 01 	sts	0x0104, r24
    TCNT0 = 256 - (F_CPU / 1000 / 64);
 104:	86 e0       	ldi	r24, 0x06	; 6
 106:	86 bd       	out	0x26, r24	; 38
}
 108:	9f 91       	pop	r25
 10a:	8f 91       	pop	r24
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <init_io_port>:

//Initialize IO Port
void init_io_port()
{
    DDR_LED |= 0xF0;
 116:	84 b1       	in	r24, 0x04	; 4
 118:	80 6f       	ori	r24, 0xF0	; 240
 11a:	84 b9       	out	0x04, r24	; 4
    PORT_LED = 0xFF;
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	85 b9       	out	0x05, r24	; 5
    DDRC &= (0 << PORT6);
 120:	87 b1       	in	r24, 0x07	; 7
 122:	17 b8       	out	0x07, r1	; 7
    DDRD &= (0 << PORT7) | (0 << PORT6) | (0 << PORT4);
 124:	8a b1       	in	r24, 0x0a	; 10
 126:	1a b8       	out	0x0a, r1	; 10
    DDR_GOT_IT_LED |= (1 << PORT1);
 128:	81 9a       	sbi	0x10, 1	; 16
    PORT_GOT_IT_LED |= (1 << PORT1);
 12a:	89 9a       	sbi	0x11, 1	; 17
 12c:	08 95       	ret

0000012e <init_timer>:

//Initialize Timer/Counter0
void init_timer()
{
    //Waveform Generation Mode : Normal mode, Clock : F_CPU/64
    TCCR0A = (0 << WGM01) | (0 << WGM00);
 12e:	14 bc       	out	0x24, r1	; 36
    TCCR0B = (0 << WGM02) | (0 << CS02) | (1 << CS01) | (1 << CS00);
 130:	83 e0       	ldi	r24, 0x03	; 3
 132:	85 bd       	out	0x25, r24	; 37
    //1ms = (1/F_CPU) * 64 * n
    //TCNT0 = 256 - n
    TCNT0 = 256 - (F_CPU / 1000 / 64);
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	86 bd       	out	0x26, r24	; 38
    //Timer/Counter0 Overflow Interrupt Enable
    TIMSK0 = (0 << OCIE0B) | (0 << OCIE0A) | (1 << TOIE0);
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	80 93 6e 00 	sts	0x006E, r24
 13e:	08 95       	ret

00000140 <delay_ms>:
}

//delay for m_sec(ms)
void delay_ms(unsigned int m_sec)
{
    time = 0;
 140:	10 92 05 01 	sts	0x0105, r1
 144:	10 92 04 01 	sts	0x0104, r1
    while(!(time >= m_sec));
 148:	20 91 04 01 	lds	r18, 0x0104
 14c:	30 91 05 01 	lds	r19, 0x0105
 150:	28 17       	cp	r18, r24
 152:	39 07       	cpc	r19, r25
 154:	c8 f3       	brcs	.-14     	; 0x148 <delay_ms+0x8>
}
 156:	08 95       	ret

00000158 <check_caught_mole>:

//function of checking whether switch of the led pressed
unsigned char check_caught_mole(unsigned int now_led)
{
 158:	a4 e0       	ldi	r26, 0x04	; 4
 15a:	b0 e0       	ldi	r27, 0x00	; 0
 15c:	e1 eb       	ldi	r30, 0xB1	; 177
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	88 c0       	rjmp	.+272    	; 0x272 <__prologue_saves__+0x20>
 162:	9c 01       	movw	r18, r24
 164:	80 e4       	ldi	r24, 0x40	; 64
    unsigned char sw[4] = {0x40, 0x10, 0x40, 0x80};
 166:	89 83       	std	Y+1, r24	; 0x01
 168:	90 e1       	ldi	r25, 0x10	; 16
 16a:	9a 83       	std	Y+2, r25	; 0x02
 16c:	8b 83       	std	Y+3, r24	; 0x03
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	8c 83       	std	Y+4, r24	; 0x04
 172:	21 15       	cp	r18, r1
    //0번 LED가 켜져있으면
    if(now_led == 0)
 174:	31 05       	cpc	r19, r1
 176:	59 f4       	brne	.+22     	; 0x18e <check_caught_mole+0x36>
 178:	86 b1       	in	r24, 0x06	; 6
    {
        //해당 스위치가 눌리면
	    if(~PIN_MOLE_SW0 & sw[now_led])
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	80 95       	com	r24
 17e:	90 95       	com	r25
 180:	26 e0       	ldi	r18, 0x06	; 6
 182:	96 95       	lsr	r25
 184:	87 95       	ror	r24
 186:	2a 95       	dec	r18
 188:	e1 f7       	brne	.-8      	; 0x182 <check_caught_mole+0x2a>
 18a:	81 70       	andi	r24, 0x01	; 1
 18c:	11 c0       	rjmp	.+34     	; 0x1b0 <check_caught_mole+0x58>
 18e:	99 b1       	in	r25, 0x09	; 9
    }
    //0번 이외에 1번, 2번, 3번 LED 중 하나가 켜져있으면
    else
    {
        //해당 스위치가 눌리면
        if(~PIN_MOLE_SW_ELSE & sw[now_led])
 190:	fe 01       	movw	r30, r28
 192:	e2 0f       	add	r30, r18
 194:	f3 1f       	adc	r31, r19
 196:	21 81       	ldd	r18, Z+1	; 0x01
 198:	42 2f       	mov	r20, r18
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	29 2f       	mov	r18, r25
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	20 95       	com	r18
 1a2:	30 95       	com	r19
 1a4:	24 23       	and	r18, r20
 1a6:	35 23       	and	r19, r21
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	23 2b       	or	r18, r19
 1ac:	09 f4       	brne	.+2      	; 0x1b0 <check_caught_mole+0x58>
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	24 96       	adiw	r28, 0x04	; 4
            return true;
        else
            return false;
    }
}
 1b2:	e2 e0       	ldi	r30, 0x02	; 2
 1b4:	7a c0       	rjmp	.+244    	; 0x2aa <__epilogue_restores__+0x20>

000001b6 <led_random>:

//random led output function
void led_random()
{
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
    //for led random, PORT_LED = ~0x80 or ~0x40 or ~0x20 or ~0x10
    //2 power n(n = 0~3) will be 0x08 or 0x04 or 0x02 or 0x01
    unsigned int led_status = 1, now_led, i;
    unsigned int random = rand()%4;
 1be:	db d0       	rcall	.+438    	; 0x376 <rand>
 1c0:	64 e0       	ldi	r22, 0x04	; 4
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	33 d0       	rcall	.+102    	; 0x22c <__divmodhi4>
 1c6:	8c 01       	movw	r16, r24
 1c8:	40 e0       	ldi	r20, 0x00	; 0
 1ca:	50 e0       	ldi	r21, 0x00	; 0
    //2 power random
    for(i = 0; i < random; i++)
 1cc:	21 e0       	ldi	r18, 0x01	; 1
 1ce:	30 e0       	ldi	r19, 0x00	; 0
//random led output function
void led_random()
{
    //for led random, PORT_LED = ~0x80 or ~0x40 or ~0x20 or ~0x10
    //2 power n(n = 0~3) will be 0x08 or 0x04 or 0x02 or 0x01
    unsigned int led_status = 1, now_led, i;
 1d0:	40 17       	cp	r20, r16
 1d2:	51 07       	cpc	r21, r17
    unsigned int random = rand()%4;
    //2 power random
    for(i = 0; i < random; i++)
 1d4:	29 f0       	breq	.+10     	; 0x1e0 <led_random+0x2a>
 1d6:	22 0f       	add	r18, r18
 1d8:	33 1f       	adc	r19, r19
        led_status *= 2;
 1da:	4f 5f       	subi	r20, 0xFF	; 255
 1dc:	5f 4f       	sbci	r21, 0xFF	; 255
    //for led random, PORT_LED = ~0x80 or ~0x40 or ~0x20 or ~0x10
    //2 power n(n = 0~3) will be 0x08 or 0x04 or 0x02 or 0x01
    unsigned int led_status = 1, now_led, i;
    unsigned int random = rand()%4;
    //2 power random
    for(i = 0; i < random; i++)
 1de:	f8 cf       	rjmp	.-16     	; 0x1d0 <led_random+0x1a>
 1e0:	20 95       	com	r18
 1e2:	22 95       	swap	r18
        led_status *= 2;
    now_led = i;
    PORT_LED = ~led_status << 4;
 1e4:	20 7f       	andi	r18, 0xF0	; 240
 1e6:	25 b9       	out	0x05, r18	; 5
 1e8:	c8 ee       	ldi	r28, 0xE8	; 232
 1ea:	d3 e0       	ldi	r29, 0x03	; 3
 1ec:	c8 01       	movw	r24, r16
 1ee:	b4 df       	rcall	.-152    	; 0x158 <check_caught_mole>
    //delay_ms(1000);
    for(i = 0; i < 1000; i++)
    {
        //지금 켜진 LED에 해당하는 스위치가 눌리면 break
        if(check_caught_mole(now_led))
 1f0:	88 23       	and	r24, r24
 1f2:	39 f0       	breq	.+14     	; 0x202 <led_random+0x4c>
 1f4:	81 b3       	in	r24, 0x11	; 17
 1f6:	11 ba       	out	0x11, r1	; 17
 1f8:	84 e6       	ldi	r24, 0x64	; 100
        {
            //GOT_IT LED ON
            PORT_GOT_IT_LED &= (0 << PORT1);
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	a1 df       	rcall	.-190    	; 0x140 <delay_ms>
            delay_ms(100);
 1fe:	89 9a       	sbi	0x11, 1	; 17
 200:	05 c0       	rjmp	.+10     	; 0x20c <led_random+0x56>
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
            PORT_GOT_IT_LED |= (1 << PORT1);
 206:	9c df       	rcall	.-200    	; 0x140 <delay_ms>
            break;
 208:	21 97       	sbiw	r28, 0x01	; 1
        }
        //1ms 동안 대기 및 반복
        delay_ms(1);
 20a:	81 f7       	brne	.-32     	; 0x1ec <led_random+0x36>
 20c:	8f ef       	ldi	r24, 0xFF	; 255
 20e:	85 b9       	out	0x05, r24	; 5
 210:	8c e2       	ldi	r24, 0x2C	; 44
 212:	91 e0       	ldi	r25, 0x01	; 1
    for(i = 0; i < random; i++)
        led_status *= 2;
    now_led = i;
    PORT_LED = ~led_status << 4;
    //delay_ms(1000);
    for(i = 0; i < 1000; i++)
 214:	95 df       	rcall	.-214    	; 0x140 <delay_ms>
        }
        //1ms 동안 대기 및 반복
        delay_ms(1);
    }
    //모든 LED OFF
    PORT_LED = 0xFF;
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
    delay_ms(300);
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	08 95       	ret

00000220 <main>:
}

int main(void)
{
    cli();
 220:	f8 94       	cli
    init_io_port();
 222:	79 df       	rcall	.-270    	; 0x116 <init_io_port>
 224:	84 df       	rcall	.-248    	; 0x12e <init_timer>
    init_timer();
 226:	78 94       	sei
 228:	c6 df       	rcall	.-116    	; 0x1b6 <led_random>
    sei();
 22a:	fe cf       	rjmp	.-4      	; 0x228 <main+0x8>

0000022c <__divmodhi4>:
    while(1)
    {
        led_random();
 22c:	97 fb       	bst	r25, 7
 22e:	07 2e       	mov	r0, r23
    }
 230:	16 f4       	brtc	.+4      	; 0x236 <__divmodhi4+0xa>
 232:	00 94       	com	r0
 234:	06 d0       	rcall	.+12     	; 0x242 <__divmodhi4_neg1>
 236:	77 fd       	sbrc	r23, 7
 238:	08 d0       	rcall	.+16     	; 0x24a <__divmodhi4_neg2>
 23a:	42 d0       	rcall	.+132    	; 0x2c0 <__udivmodhi4>
 23c:	07 fc       	sbrc	r0, 7
 23e:	05 d0       	rcall	.+10     	; 0x24a <__divmodhi4_neg2>
 240:	3e f4       	brtc	.+14     	; 0x250 <__divmodhi4_exit>

00000242 <__divmodhi4_neg1>:
 242:	90 95       	com	r25
 244:	81 95       	neg	r24
 246:	9f 4f       	sbci	r25, 0xFF	; 255
 248:	08 95       	ret

0000024a <__divmodhi4_neg2>:
 24a:	70 95       	com	r23
 24c:	61 95       	neg	r22
 24e:	7f 4f       	sbci	r23, 0xFF	; 255

00000250 <__divmodhi4_exit>:
 250:	08 95       	ret

00000252 <__prologue_saves__>:
 252:	2f 92       	push	r2
 254:	3f 92       	push	r3
 256:	4f 92       	push	r4
 258:	5f 92       	push	r5
 25a:	6f 92       	push	r6
 25c:	7f 92       	push	r7
 25e:	8f 92       	push	r8
 260:	9f 92       	push	r9
 262:	af 92       	push	r10
 264:	bf 92       	push	r11
 266:	cf 92       	push	r12
 268:	df 92       	push	r13
 26a:	ef 92       	push	r14
 26c:	ff 92       	push	r15
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
 27a:	ca 1b       	sub	r28, r26
 27c:	db 0b       	sbc	r29, r27
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	f8 94       	cli
 282:	de bf       	out	0x3e, r29	; 62
 284:	0f be       	out	0x3f, r0	; 63
 286:	cd bf       	out	0x3d, r28	; 61
 288:	09 94       	ijmp

0000028a <__epilogue_restores__>:
 28a:	2a 88       	ldd	r2, Y+18	; 0x12
 28c:	39 88       	ldd	r3, Y+17	; 0x11
 28e:	48 88       	ldd	r4, Y+16	; 0x10
 290:	5f 84       	ldd	r5, Y+15	; 0x0f
 292:	6e 84       	ldd	r6, Y+14	; 0x0e
 294:	7d 84       	ldd	r7, Y+13	; 0x0d
 296:	8c 84       	ldd	r8, Y+12	; 0x0c
 298:	9b 84       	ldd	r9, Y+11	; 0x0b
 29a:	aa 84       	ldd	r10, Y+10	; 0x0a
 29c:	b9 84       	ldd	r11, Y+9	; 0x09
 29e:	c8 84       	ldd	r12, Y+8	; 0x08
 2a0:	df 80       	ldd	r13, Y+7	; 0x07
 2a2:	ee 80       	ldd	r14, Y+6	; 0x06
 2a4:	fd 80       	ldd	r15, Y+5	; 0x05
 2a6:	0c 81       	ldd	r16, Y+4	; 0x04
 2a8:	1b 81       	ldd	r17, Y+3	; 0x03
 2aa:	aa 81       	ldd	r26, Y+2	; 0x02
 2ac:	b9 81       	ldd	r27, Y+1	; 0x01
 2ae:	ce 0f       	add	r28, r30
 2b0:	d1 1d       	adc	r29, r1
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	f8 94       	cli
 2b6:	de bf       	out	0x3e, r29	; 62
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	cd bf       	out	0x3d, r28	; 61
 2bc:	ed 01       	movw	r28, r26
 2be:	08 95       	ret

000002c0 <__udivmodhi4>:
 2c0:	aa 1b       	sub	r26, r26
 2c2:	bb 1b       	sub	r27, r27
 2c4:	51 e1       	ldi	r21, 0x11	; 17
 2c6:	07 c0       	rjmp	.+14     	; 0x2d6 <__udivmodhi4_ep>

000002c8 <__udivmodhi4_loop>:
 2c8:	aa 1f       	adc	r26, r26
 2ca:	bb 1f       	adc	r27, r27
 2cc:	a6 17       	cp	r26, r22
 2ce:	b7 07       	cpc	r27, r23
 2d0:	10 f0       	brcs	.+4      	; 0x2d6 <__udivmodhi4_ep>
 2d2:	a6 1b       	sub	r26, r22
 2d4:	b7 0b       	sbc	r27, r23

000002d6 <__udivmodhi4_ep>:
 2d6:	88 1f       	adc	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	5a 95       	dec	r21
 2dc:	a9 f7       	brne	.-22     	; 0x2c8 <__udivmodhi4_loop>
 2de:	80 95       	com	r24
 2e0:	90 95       	com	r25
 2e2:	bc 01       	movw	r22, r24
 2e4:	cd 01       	movw	r24, r26
 2e6:	08 95       	ret

000002e8 <do_rand>:
 2e8:	8f 92       	push	r8
 2ea:	9f 92       	push	r9
 2ec:	af 92       	push	r10
 2ee:	bf 92       	push	r11
 2f0:	cf 92       	push	r12
 2f2:	df 92       	push	r13
 2f4:	ef 92       	push	r14
 2f6:	ff 92       	push	r15
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	ec 01       	movw	r28, r24
 2fe:	68 81       	ld	r22, Y
 300:	79 81       	ldd	r23, Y+1	; 0x01
 302:	8a 81       	ldd	r24, Y+2	; 0x02
 304:	9b 81       	ldd	r25, Y+3	; 0x03
 306:	61 15       	cp	r22, r1
 308:	71 05       	cpc	r23, r1
 30a:	81 05       	cpc	r24, r1
 30c:	91 05       	cpc	r25, r1
 30e:	21 f4       	brne	.+8      	; 0x318 <do_rand+0x30>
 310:	64 e2       	ldi	r22, 0x24	; 36
 312:	79 ed       	ldi	r23, 0xD9	; 217
 314:	8b e5       	ldi	r24, 0x5B	; 91
 316:	97 e0       	ldi	r25, 0x07	; 7
 318:	2d e1       	ldi	r18, 0x1D	; 29
 31a:	33 ef       	ldi	r19, 0xF3	; 243
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	50 e0       	ldi	r21, 0x00	; 0
 320:	38 d0       	rcall	.+112    	; 0x392 <__divmodsi4>
 322:	49 01       	movw	r8, r18
 324:	5a 01       	movw	r10, r20
 326:	9b 01       	movw	r18, r22
 328:	ac 01       	movw	r20, r24
 32a:	a7 ea       	ldi	r26, 0xA7	; 167
 32c:	b1 e4       	ldi	r27, 0x41	; 65
 32e:	4d d0       	rcall	.+154    	; 0x3ca <__muluhisi3>
 330:	6b 01       	movw	r12, r22
 332:	7c 01       	movw	r14, r24
 334:	ac ee       	ldi	r26, 0xEC	; 236
 336:	b4 ef       	ldi	r27, 0xF4	; 244
 338:	a5 01       	movw	r20, r10
 33a:	94 01       	movw	r18, r8
 33c:	52 d0       	rcall	.+164    	; 0x3e2 <__mulohisi3>
 33e:	dc 01       	movw	r26, r24
 340:	cb 01       	movw	r24, r22
 342:	8c 0d       	add	r24, r12
 344:	9d 1d       	adc	r25, r13
 346:	ae 1d       	adc	r26, r14
 348:	bf 1d       	adc	r27, r15
 34a:	b7 ff       	sbrs	r27, 7
 34c:	03 c0       	rjmp	.+6      	; 0x354 <do_rand+0x6c>
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	a1 09       	sbc	r26, r1
 352:	b0 48       	sbci	r27, 0x80	; 128
 354:	88 83       	st	Y, r24
 356:	99 83       	std	Y+1, r25	; 0x01
 358:	aa 83       	std	Y+2, r26	; 0x02
 35a:	bb 83       	std	Y+3, r27	; 0x03
 35c:	9f 77       	andi	r25, 0x7F	; 127
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	ff 90       	pop	r15
 364:	ef 90       	pop	r14
 366:	df 90       	pop	r13
 368:	cf 90       	pop	r12
 36a:	bf 90       	pop	r11
 36c:	af 90       	pop	r10
 36e:	9f 90       	pop	r9
 370:	8f 90       	pop	r8
 372:	08 95       	ret

00000374 <rand_r>:
 374:	b9 cf       	rjmp	.-142    	; 0x2e8 <do_rand>

00000376 <rand>:
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	91 e0       	ldi	r25, 0x01	; 1
 37a:	b6 cf       	rjmp	.-148    	; 0x2e8 <do_rand>

0000037c <srand>:
 37c:	a0 e0       	ldi	r26, 0x00	; 0
 37e:	b0 e0       	ldi	r27, 0x00	; 0
 380:	80 93 00 01 	sts	0x0100, r24
 384:	90 93 01 01 	sts	0x0101, r25
 388:	a0 93 02 01 	sts	0x0102, r26
 38c:	b0 93 03 01 	sts	0x0103, r27
 390:	08 95       	ret

00000392 <__divmodsi4>:
 392:	05 2e       	mov	r0, r21
 394:	97 fb       	bst	r25, 7
 396:	16 f4       	brtc	.+4      	; 0x39c <__divmodsi4+0xa>
 398:	00 94       	com	r0
 39a:	0f d0       	rcall	.+30     	; 0x3ba <__negsi2>
 39c:	57 fd       	sbrc	r21, 7
 39e:	05 d0       	rcall	.+10     	; 0x3aa <__divmodsi4_neg2>
 3a0:	24 d0       	rcall	.+72     	; 0x3ea <__udivmodsi4>
 3a2:	07 fc       	sbrc	r0, 7
 3a4:	02 d0       	rcall	.+4      	; 0x3aa <__divmodsi4_neg2>
 3a6:	46 f4       	brtc	.+16     	; 0x3b8 <__divmodsi4_exit>
 3a8:	08 c0       	rjmp	.+16     	; 0x3ba <__negsi2>

000003aa <__divmodsi4_neg2>:
 3aa:	50 95       	com	r21
 3ac:	40 95       	com	r20
 3ae:	30 95       	com	r19
 3b0:	21 95       	neg	r18
 3b2:	3f 4f       	sbci	r19, 0xFF	; 255
 3b4:	4f 4f       	sbci	r20, 0xFF	; 255
 3b6:	5f 4f       	sbci	r21, 0xFF	; 255

000003b8 <__divmodsi4_exit>:
 3b8:	08 95       	ret

000003ba <__negsi2>:
 3ba:	90 95       	com	r25
 3bc:	80 95       	com	r24
 3be:	70 95       	com	r23
 3c0:	61 95       	neg	r22
 3c2:	7f 4f       	sbci	r23, 0xFF	; 255
 3c4:	8f 4f       	sbci	r24, 0xFF	; 255
 3c6:	9f 4f       	sbci	r25, 0xFF	; 255
 3c8:	08 95       	ret

000003ca <__muluhisi3>:
 3ca:	31 d0       	rcall	.+98     	; 0x42e <__umulhisi3>
 3cc:	a5 9f       	mul	r26, r21
 3ce:	90 0d       	add	r25, r0
 3d0:	b4 9f       	mul	r27, r20
 3d2:	90 0d       	add	r25, r0
 3d4:	a4 9f       	mul	r26, r20
 3d6:	80 0d       	add	r24, r0
 3d8:	91 1d       	adc	r25, r1
 3da:	11 24       	eor	r1, r1
 3dc:	08 95       	ret

000003de <__mulshisi3>:
 3de:	b7 ff       	sbrs	r27, 7
 3e0:	f4 cf       	rjmp	.-24     	; 0x3ca <__muluhisi3>

000003e2 <__mulohisi3>:
 3e2:	f3 df       	rcall	.-26     	; 0x3ca <__muluhisi3>
 3e4:	82 1b       	sub	r24, r18
 3e6:	93 0b       	sbc	r25, r19
 3e8:	08 95       	ret

000003ea <__udivmodsi4>:
 3ea:	a1 e2       	ldi	r26, 0x21	; 33
 3ec:	1a 2e       	mov	r1, r26
 3ee:	aa 1b       	sub	r26, r26
 3f0:	bb 1b       	sub	r27, r27
 3f2:	fd 01       	movw	r30, r26
 3f4:	0d c0       	rjmp	.+26     	; 0x410 <__udivmodsi4_ep>

000003f6 <__udivmodsi4_loop>:
 3f6:	aa 1f       	adc	r26, r26
 3f8:	bb 1f       	adc	r27, r27
 3fa:	ee 1f       	adc	r30, r30
 3fc:	ff 1f       	adc	r31, r31
 3fe:	a2 17       	cp	r26, r18
 400:	b3 07       	cpc	r27, r19
 402:	e4 07       	cpc	r30, r20
 404:	f5 07       	cpc	r31, r21
 406:	20 f0       	brcs	.+8      	; 0x410 <__udivmodsi4_ep>
 408:	a2 1b       	sub	r26, r18
 40a:	b3 0b       	sbc	r27, r19
 40c:	e4 0b       	sbc	r30, r20
 40e:	f5 0b       	sbc	r31, r21

00000410 <__udivmodsi4_ep>:
 410:	66 1f       	adc	r22, r22
 412:	77 1f       	adc	r23, r23
 414:	88 1f       	adc	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	1a 94       	dec	r1
 41a:	69 f7       	brne	.-38     	; 0x3f6 <__udivmodsi4_loop>
 41c:	60 95       	com	r22
 41e:	70 95       	com	r23
 420:	80 95       	com	r24
 422:	90 95       	com	r25
 424:	9b 01       	movw	r18, r22
 426:	ac 01       	movw	r20, r24
 428:	bd 01       	movw	r22, r26
 42a:	cf 01       	movw	r24, r30
 42c:	08 95       	ret

0000042e <__umulhisi3>:
 42e:	a2 9f       	mul	r26, r18
 430:	b0 01       	movw	r22, r0
 432:	b3 9f       	mul	r27, r19
 434:	c0 01       	movw	r24, r0
 436:	a3 9f       	mul	r26, r19
 438:	70 0d       	add	r23, r0
 43a:	81 1d       	adc	r24, r1
 43c:	11 24       	eor	r1, r1
 43e:	91 1d       	adc	r25, r1
 440:	b2 9f       	mul	r27, r18
 442:	70 0d       	add	r23, r0
 444:	81 1d       	adc	r24, r1
 446:	11 24       	eor	r1, r1
 448:	91 1d       	adc	r25, r1
 44a:	08 95       	ret

0000044c <_exit>:
 44c:	f8 94       	cli

0000044e <__stop_program>:
 44e:	ff cf       	rjmp	.-2      	; 0x44e <__stop_program>
